.TH "include/ps_lang_init.h" 3 "Fri Feb 9 2024" "Version 2024-02-09" "Push Swap" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/ps_lang_init.h
.SH SYNOPSIS
.br
.PP
\fC#include 'ps_lang_types\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "\fBt_ps_stacks\fP * \fBinit_ps\fP (void)"
.br
.RI "\fBinit_ps\fP -- Allocates memory for a t_ps_stacks structure\&. "
.ti -1c
.RI "void \fBfree_ps\fP (\fBt_ps_stacks\fP **ps)"
.br
.RI "\fBfree_ps\fP -- Frees t_ps_stacks structure\&. "
.ti -1c
.RI "int \fBalready_in_a\fP (\fBt_ps_stacks\fP *ps, int element)"
.br
.RI "\fBalready_in_a\fP -- Checks if an integer is already in stack a\&. "
.ti -1c
.RI "int \fBbottom_pusha\fP (\fBt_ps_stacks\fP *ps, int element)"
.br
.RI "\fBbottom_pusha\fP -- Pushes an integer to the bottom of stack a\&. "
.in -1c
.SH "Detailed Description"
.PP 
Support functions for the 'push swap language'\&. Memory allocation and freeing function for the structure; initialization of the structure with user arguments; no-duplication check; etc\&. 
.SH "Function Documentation"
.PP 
.SS "int already_in_a (\fBt_ps_stacks\fP * ps, int element)"

.PP
\fBalready_in_a\fP -- Checks if an integer is already in stack a\&. 
.PP
\fBParameters\fP
.RS 4
\fIps\fP - The address of the pointer to the push swap stacks struct\&.
.br
\fIelement\fP - The integer to look for in stack a\&.
.RE
.PP
\fBReturns\fP
.RS 4
- A non-zero value if the element was found in stack a\&. 
.br
 A 0 value otherwise\&. 
.RE
.PP

.SS "int bottom_pusha (\fBt_ps_stacks\fP * ps, int element)"

.PP
\fBbottom_pusha\fP -- Pushes an integer to the bottom of stack a\&. Pushes an integer to the bottom of stack a\&. This function is used to initialize the content from the command-line arguments according to this requirement: 'The first argument should be at the top of the stack (be
careful about the order)'\&.
.PP
\fBParameters\fP
.RS 4
\fIps\fP - The address of the pointer to the push swap stacks struct\&.
.br
\fIelement\fP - The integer to push to the bottom of stack a\&.
.RE
.PP
\fBReturns\fP
.RS 4
- A non-zero value if succesful\&. 
.br
 A 0 value if memory allocation fails\&. 
.RE
.PP

.SS "void free_ps (\fBt_ps_stacks\fP ** ps)"

.PP
\fBfree_ps\fP -- Frees t_ps_stacks structure\&. Frees both dlclst stacks and then de t_ps_stacks structure\&.
.PP
\fBParameters\fP
.RS 4
\fIps\fP - The address of the pointer to the push swap stacks struct\&. 
.RE
.PP

.SS "\fBt_ps_stacks\fP * init_ps (void)"

.PP
\fBinit_ps\fP -- Allocates memory for a t_ps_stacks structure\&. Allocates memory for both dlclst stacks a and b and their t_ps_stacks structure container\&.
.PP
\fBReturns\fP
.RS 4
- The initialized t_ps_stacks\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Push Swap from the source code\&.
