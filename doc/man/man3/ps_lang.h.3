.TH "include/ps_lang.h" 3 "Tue Feb 6 2024" "Version 2024-02-06" "Push Swap" \" -*- nroff -*-
.ad l
.nh
.SH NAME
include/ps_lang.h
.SH SYNOPSIS
.br
.PP
\fC#include 'libft\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBs_ps_stacks\fP"
.br
.RI "Base for typedef \fBt_ps_stacks\fP for the main data structure for push_swap project\&. "
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef struct \fBs_ps_stacks\fP \fBt_ps_stacks\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBsa\fP (\fBt_ps_stacks\fP *ps)"
.br
.RI "\fBsa\fP -- Swap a\&. "
.ti -1c
.RI "void \fBsb\fP (\fBt_ps_stacks\fP *ps)"
.br
.RI "\fBsb\fP -- Swap b\&. "
.ti -1c
.RI "void \fBss\fP (\fBt_ps_stacks\fP *ps)"
.br
.RI "\fBss\fP -- Swap a and b at the same time\&. "
.ti -1c
.RI "void \fBpa\fP (\fBt_ps_stacks\fP *ps)"
.br
.RI "\fBpa\fP -- Pop b then push it to a\&. "
.ti -1c
.RI "void \fBpb\fP (\fBt_ps_stacks\fP *ps)"
.br
.RI "\fBpb\fP -- Pop a then push it to b\&. "
.ti -1c
.RI "void \fBra\fP (\fBt_ps_stacks\fP *ps)"
.br
.RI "\fBra\fP -- Rotate a\&. "
.ti -1c
.RI "void \fBrb\fP (\fBt_ps_stacks\fP *ps)"
.br
.RI "\fBrb\fP -- Rotate b\&. "
.ti -1c
.RI "void \fBrr\fP (\fBt_ps_stacks\fP *ps)"
.br
.RI "\fBrr\fP -- Rotate a and b at the same time\&. "
.ti -1c
.RI "void \fBrra\fP (\fBt_ps_stacks\fP *ps)"
.br
.RI "\fBrra\fP -- Reverse rotate a\&. "
.ti -1c
.RI "void \fBrrb\fP (\fBt_ps_stacks\fP *ps)"
.br
.RI "\fBrrb\fP -- Reverse rotate b\&. "
.ti -1c
.RI "void \fBrrr\fP (\fBt_ps_stacks\fP *ps)"
.br
.RI "\fBrrr\fP -- Reverse rotate a and b at the same time\&. "
.ti -1c
.RI "\fBt_ps_stacks\fP * \fBinit_ps\fP (void)"
.br
.RI "\fBinit_ps\fP -- Allocates memory for a t_ps_stacks structure\&. "
.ti -1c
.RI "void \fBfree_ps\fP (\fBt_ps_stacks\fP **ps)"
.br
.RI "\fBfree_ps\fP -- Frees t_ps_stacks structure\&. "
.ti -1c
.RI "int \fBalready_in_a\fP (\fBt_ps_stacks\fP *ps, int element)"
.br
.RI "\fBalready_in_a\fP -- Checks if an integer is already in stack a\&. "
.ti -1c
.RI "int \fBbottom_pusha\fP (\fBt_ps_stacks\fP *ps, int element)"
.br
.RI "\fBbottom_pusha\fP -- Pushes an integer to the bottom of stack a\&. "
.ti -1c
.RI "void \fBprinta\fP (\fBt_ps_stacks\fP *ps)"
.br
.RI "\fBprinta\fP -- Prints the content of stack a\&. "
.ti -1c
.RI "void \fBprintb\fP (\fBt_ps_stacks\fP *ps)"
.br
.RI "\fBprintb\fP -- Prints the content of stack b\&. "
.in -1c
.SH "Detailed Description"
.PP 
TODO Doubly linked circular list implementation\&. Part of libft library\&. 
.br
 A dlclst has a head which points to the node that is to be interpreted as the begining of the list or its first element\&. In the same way, the list alsohas a last element which will be the node pointed to by the 'prev' field of the head node\&. 
.br
 In a dlclst list with just one element, that element will point to itself\&. That is, the only node will be the first and the last at the same time\&. 
.br
 In this sense, due to the circular nature of the dlclst list, NO check is performed against the size of the list while operating on their elements and traversing the list\&. A value for position or steps from one node to another that could cause an overflow of the head of the list is allowed and will be interpreted consistently with the circular nature of the list\&. 
.SH "Function Documentation"
.PP 
.SS "int already_in_a (\fBt_ps_stacks\fP * ps, int element)"

.PP
\fBalready_in_a\fP -- Checks if an integer is already in stack a\&. 
.PP
\fBParameters\fP
.RS 4
\fIps\fP - The address of the pointer to the push swap stacks struct\&.
.br
\fIelement\fP - The integer to look for in stack a\&.
.RE
.PP
\fBReturns\fP
.RS 4
- A non-zero value if the element was found in stack a\&. 
.br
 A 0 value otherwise\&. 
.RE
.PP

.SS "int bottom_pusha (\fBt_ps_stacks\fP * ps, int element)"

.PP
\fBbottom_pusha\fP -- Pushes an integer to the bottom of stack a\&. Pushes an integer to the bottom of stack a\&. This function is used to initialize the content from the command-line arguments according to this requirement: 'The first argument should be at the top of the stack (be
careful about the order)'\&.
.PP
\fBParameters\fP
.RS 4
\fIps\fP - The address of the pointer to the push swap stacks struct\&.
.br
\fIelement\fP - The integer to push to the bottom of stack a\&.
.RE
.PP
\fBReturns\fP
.RS 4
- A non-zero value if succesful\&. 
.br
 A 0 value if memory allocation fails\&. 
.RE
.PP

.SS "void free_ps (\fBt_ps_stacks\fP ** ps)"

.PP
\fBfree_ps\fP -- Frees t_ps_stacks structure\&. Frees both dlclst stacks and then de t_ps_stacks structure\&.
.PP
\fBParameters\fP
.RS 4
\fIps\fP - The address of the pointer to the push swap stacks struct\&. 
.RE
.PP

.SS "\fBt_ps_stacks\fP * init_ps (void)"

.PP
\fBinit_ps\fP -- Allocates memory for a t_ps_stacks structure\&. Allocates memory for both dlclst stacks a and b and their t_ps_stacks structure container\&.
.PP
\fBReturns\fP
.RS 4
- The initialized t_ps_stacks\&. 
.RE
.PP

.SS "void pa (\fBt_ps_stacks\fP * ps)"

.PP
\fBpa\fP -- Pop b then push it to a\&. Take the first element at the top of b and put it at the top of a\&. 
.br
 Do nothing if b is empty
.PP
\fBParameters\fP
.RS 4
\fIps\fP - The pointer to the push swap stacks struct\&.
.RE
.PP
\fBWarning\fP
.RS 4
EXTERNAL FUNCTION USED: TODO malloc()\&.
.RE
.PP
\fBRemarks\fP
.RS 4
Implementation notes: TODO Argument content is NOT checked for NULL, a node with NULL content is returned\&. If malloc fails, must return NULL\&. 
.RE
.PP

.SS "void pb (\fBt_ps_stacks\fP * ps)"

.PP
\fBpb\fP -- Pop a then push it to b\&. Take the first element at the top of a and put it at the top of b\&. 
.br
 Do nothing if b is empty
.PP
\fBParameters\fP
.RS 4
\fIps\fP - The pointer to the push swap stacks struct\&.
.RE
.PP
\fBWarning\fP
.RS 4
EXTERNAL FUNCTION USED: TODO malloc()\&.
.RE
.PP
\fBRemarks\fP
.RS 4
Implementation notes: TODO Argument content is NOT checked for NULL, a node with NULL content is returned\&. If malloc fails, must return NULL\&. 
.RE
.PP

.SS "void printa (\fBt_ps_stacks\fP * ps)"

.PP
\fBprinta\fP -- Prints the content of stack a\&. Prints the content of stack a\&. The uppermost element is the top of the stack\&.
.PP
\fBParameters\fP
.RS 4
\fIps\fP - The address of the pointer to the push swap stacks struct\&. 
.RE
.PP

.SS "void printb (\fBt_ps_stacks\fP * ps)"

.PP
\fBprintb\fP -- Prints the content of stack b\&. Prints the content of stack b\&. The uppermost element is the top of the stack\&.
.PP
\fBParameters\fP
.RS 4
\fIps\fP - The address of the pointer to the push swap stacks struct\&. 
.RE
.PP

.SS "void ra (\fBt_ps_stacks\fP * ps)"

.PP
\fBra\fP -- Rotate a\&. Shift up all elements of stack a by 1\&. 
.br
 The first element becomes the last one\&.
.PP
\fBParameters\fP
.RS 4
\fIps\fP - The pointer to the push swap stacks struct\&.
.RE
.PP
\fBWarning\fP
.RS 4
EXTERNAL FUNCTION USED: TODO malloc()\&.
.RE
.PP
\fBRemarks\fP
.RS 4
Implementation notes: TODO Argument content is NOT checked for NULL, a node with NULL content is returned\&. If malloc fails, must return NULL\&. 
.RE
.PP

.SS "void rb (\fBt_ps_stacks\fP * ps)"

.PP
\fBrb\fP -- Rotate b\&. Shift up all elements of stack b by 1\&. 
.br
 The first element becomes the last one\&.
.PP
\fBParameters\fP
.RS 4
\fIps\fP - The pointer to the push swap stacks struct\&.
.RE
.PP
\fBWarning\fP
.RS 4
EXTERNAL FUNCTION USED: TODO malloc()\&.
.RE
.PP
\fBRemarks\fP
.RS 4
Implementation notes: TODO Argument content is NOT checked for NULL, a node with NULL content is returned\&. If malloc fails, must return NULL\&. 
.RE
.PP

.SS "void rr (\fBt_ps_stacks\fP * ps)"

.PP
\fBrr\fP -- Rotate a and b at the same time\&. Performs \fBra()\fP and \fBrb()\fP at the same time\&.
.PP
\fBParameters\fP
.RS 4
\fIps\fP - The pointer to the push swap stacks struct\&.
.RE
.PP
\fBWarning\fP
.RS 4
EXTERNAL FUNCTION USED: TODO malloc()\&.
.RE
.PP
\fBRemarks\fP
.RS 4
Implementation notes: TODO Argument content is NOT checked for NULL, a node with NULL content is returned\&. If malloc fails, must return NULL\&. 
.RE
.PP

.SS "void rra (\fBt_ps_stacks\fP * ps)"

.PP
\fBrra\fP -- Reverse rotate a\&. Shift down all elements of stack a by 1\&. 
.br
 The last element becomes the first one\&.
.PP
\fBParameters\fP
.RS 4
\fIps\fP - The pointer to the push swap stacks struct\&.
.RE
.PP
\fBWarning\fP
.RS 4
EXTERNAL FUNCTION USED: TODO malloc()\&.
.RE
.PP
\fBRemarks\fP
.RS 4
Implementation notes: TODO Argument content is NOT checked for NULL, a node with NULL content is returned\&. If malloc fails, must return NULL\&. 
.RE
.PP

.SS "void rrb (\fBt_ps_stacks\fP * ps)"

.PP
\fBrrb\fP -- Reverse rotate b\&. Shift down all elements of stack b by 1\&. 
.br
 The last element becomes the first one\&.
.PP
\fBParameters\fP
.RS 4
\fIps\fP - The pointer to the push swap stacks struct\&.
.RE
.PP
\fBWarning\fP
.RS 4
EXTERNAL FUNCTION USED: TODO malloc()\&.
.RE
.PP
\fBRemarks\fP
.RS 4
Implementation notes: TODO Argument content is NOT checked for NULL, a node with NULL content is returned\&. If malloc fails, must return NULL\&. 
.RE
.PP

.SS "void rrr (\fBt_ps_stacks\fP * ps)"

.PP
\fBrrr\fP -- Reverse rotate a and b at the same time\&. Performs \fBrra()\fP and \fBrrb()\fP at the same time\&.
.PP
\fBParameters\fP
.RS 4
\fIps\fP - The pointer to the push swap stacks struct\&.
.RE
.PP
\fBWarning\fP
.RS 4
EXTERNAL FUNCTION USED: TODO malloc()\&.
.RE
.PP
\fBRemarks\fP
.RS 4
Implementation notes: TODO Argument content is NOT checked for NULL, a node with NULL content is returned\&. If malloc fails, must return NULL\&. 
.RE
.PP

.SS "void sa (\fBt_ps_stacks\fP * ps)"

.PP
\fBsa\fP -- Swap a\&. Swap the first 2 elements at the top of stack a\&. 
.br
 Do nothing if there is only one or no elements\&.
.PP
\fBParameters\fP
.RS 4
\fIps\fP - The pointer to the push swap stacks struct\&.
.RE
.PP
\fBWarning\fP
.RS 4
EXTERNAL FUNCTION USED: TODO malloc()\&.
.RE
.PP
\fBRemarks\fP
.RS 4
Implementation notes: TODO Argument content is NOT checked for NULL, a node with NULL content is returned\&. If malloc fails, must return NULL\&. 
.RE
.PP

.SS "void sb (\fBt_ps_stacks\fP * ps)"

.PP
\fBsb\fP -- Swap b\&. Swap the first 2 elements at the top of stack b\&. 
.br
 Do nothing if there is only one or no elements\&.
.PP
\fBParameters\fP
.RS 4
\fIps\fP - The pointer to the push swap stacks struct\&.
.RE
.PP
\fBWarning\fP
.RS 4
EXTERNAL FUNCTION USED: TODO malloc()\&.
.RE
.PP
\fBRemarks\fP
.RS 4
Implementation notes: TODO Argument content is NOT checked for NULL, a node with NULL content is returned\&. If malloc fails, must return NULL\&. 
.RE
.PP

.SS "void ss (\fBt_ps_stacks\fP * ps)"

.PP
\fBss\fP -- Swap a and b at the same time\&. Performs \fBsa()\fP and \fBsb()\fP at the same time\&.
.PP
\fBParameters\fP
.RS 4
\fIps\fP - The pointer to the push swap stacks struct\&.
.RE
.PP
\fBWarning\fP
.RS 4
EXTERNAL FUNCTION USED: TODO malloc()\&.
.RE
.PP
\fBRemarks\fP
.RS 4
Implementation notes: TODO Argument content is NOT checked for NULL, a node with NULL content is returned\&. If malloc fails, must return NULL\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Push Swap from the source code\&.
